{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RSk\\\\Documents\\\\GitHub\\\\React_Keep\\\\client\\\\src\\\\App.js\";\n// /client/App.js\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Container, Button, Form, FormGroup, Input, Card, CardHeader, CardBody, Row, Col } from 'reactstrap';\nimport 'reactstrap';\nimport Modal from \"./components/modal\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getDataFromDb = () => {\n      fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = (title, message) => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/putData', {\n        id: idToBeAdded,\n        message: message,\n        title: title\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      parseInt(idTodelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id === idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://localhost:3001/api/deleteData', {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateTitle, updateMessage) => {\n      axios.put('http://localhost:3001/api/updateData', {\n        id: idToUpdate,\n        update: {\n          title: updateTitle,\n          message: updateMessage\n        }\n      });\n    };\n\n    this.state = {\n      modal: false,\n      data: [],\n      id: 0,\n      title: null,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n    this.updateDB = this.updateDB.bind(this);\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  }\n\n  render() {\n    const data = this.state.data;\n    return React.createElement(Container, {\n      fluid: true,\n      className: \"page-size\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        marginLeft: 10 + \"em\",\n        marginRight: 10 + \"em\",\n        marginTop: 5 + \"em\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Input, {\n      onChange: e => this.setState({\n        title: e.target.value\n      }),\n      type: \"Title\",\n      name: \"title\",\n      id: \"newTitle\",\n      placeholder: \"Title\",\n      className: \"no-border\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Input, {\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      type: \"textarea\",\n      name: \"note\",\n      id: \"newtitle\",\n      placeholder: \"Take a note ...\",\n      className: \"no-border\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(Button, {\n      onClick: () => this.putDataToDB(this.state.title, this.state.message),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"ADD\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => React.createElement(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"card-size\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, dat.title)), React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, dat.message), React.createElement(Button, {\n      color: \"danger\",\n      onClick: () => this.deleteFromDB(dat.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"DELETE\"), React.createElement(Modal, {\n      id: dat.id,\n      title: dat.title,\n      message: dat.message,\n      updateDB: this.updateDB,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\RSk\\Documents\\GitHub\\React_Keep\\client\\src\\App.js"],"names":["React","Component","axios","Container","Button","Form","FormGroup","Input","Card","CardHeader","CardBody","Row","Col","Modal","App","constructor","props","getDataFromDb","fetch","then","data","json","res","setState","putDataToDB","title","message","currentIds","state","map","id","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","idToUpdate","updateTitle","updateMessage","put","update","modal","intervalIsSet","idToDelete","objectToUpdate","bind","toggle","prevState","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","marginLeft","marginRight","marginTop","e","target","value","length"],"mappings":"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","sourcesContent":["// /client/App.js\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Container, Button, Form, FormGroup, Input, Card, CardHeader,CardBody, Row, Col} from 'reactstrap';\nimport { } from 'reactstrap';\nimport Modal from \"./components/modal\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      data: [],\n      id: 0,\n      title: null,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n\n    };\n\n    this.updateDB = this.updateDB.bind(this);\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n\n  getDataFromDb = () => {\n    fetch('http://localhost:3001/api/getData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n  putDataToDB = (title,message) => {\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message,\n      title: title\n    });\n  };\n\n  deleteFromDB = (idTodelete) => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n      if (dat.id === idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data: {\n        id: objIdToDelete,\n      },\n    });\n  };\n\n  updateDB = (idToUpdate, updateTitle, updateMessage) => {\n    axios.put('http://localhost:3001/api/updateData', {\n      id: idToUpdate,\n      update: {  title: updateTitle, message: updateMessage },\n    });\n  };\n  render() {\n    const  {data } = this.state;\n    return (\n      <Container fluid className=\"page-size\">\n        <Card style={{marginLeft:10+\"em\",marginRight:10+\"em\", marginTop:5+\"em\"}}>\n          <Form>\n          <FormGroup>\n            <Input  \n              onChange={(e) => this.setState({ title: e.target.value })}\n              type=\"Title\" \n              name=\"title\" \n              id=\"newTitle\" \n              placeholder=\"Title\" \n              className=\"no-border\"/>\n              \n            <Input \n              onChange={(e) => this.setState({ message: e.target.value })}\n              type=\"textarea\" \n              name=\"note\" \n              id=\"newtitle\" \n              placeholder=\"Take a note ...\"\n              className=\"no-border\"/>\n\n          </FormGroup>\n          <Button onClick={() => this.putDataToDB(this.state.title,this.state.message)}>\n              ADD\n            </Button>\n        </Form>\n      </Card>\n      <br/>\n      <Row>\n        \n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n            <Col xs=\"6\" sm=\"4\">\n              <Card className=\"card-size\">\n                <CardHeader><strong>{dat.title}</strong></CardHeader>\n                <CardBody>{dat.message}</CardBody>\n            \n                  <Button color=\"danger\" onClick={() => this.deleteFromDB(dat.id)}>\n                    DELETE\n                  </Button>\n                  <Modal id={dat.id} title={dat.title} message={dat.message} updateDB={this.updateDB}/>\n              </Card>\n              <br/>\n              </Col>\n              ))}\n              \n              </Row>\n      </Container>\n      \n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}